apply plugin: 'tinkerpatch-support'

def bakPath = file("${buildDir}/bakApk/")
def baseInfo = "app-1.0.0-0216-13-55-30"
def variantName = "release"

/**
 * 对于插件各参数的详细解析请参考
 * http://tinkerpatch.com/Docs/SDK
 */
tinkerpatchSupport {
    /** 是否开启 tinkerpatchSupport 插件功能 可以在debug的时候关闭 tinkerPatch **/
    tinkerEnable = true
    /**是否反射 Application 实现一键接入；一般来说，
     * 接入 Tinker 我们需要改造我们的 Application, 若这里为 true， 即我们无需对应用做任何改造即可接入*/
    reflectApplication = false

    /**将每次编译产生的 apk/mapping.txt/R.txt 归档存储的位置*/
    autoBackupApkPath = "${bakPath}"

    /**在 TinkerPatch 平台 申请的 appkey, 例如 sample 中的 'f828475486f91936'*/
    appKey = "1de84084941ed80b"
    /**在 TinkerPatch 平台 输入的版本号, 例如 sample 中的 '1.0.0'。
     * 注意，我们使用 appVersion 作为 TinkerId, 我们需要保证每个发布出去的基础安装包的 appVersion 都不一样。*/
    appVersion = "1.0.0"


    def pathPrefix = "${bakPath}/${baseInfo}/${variantName}/"
    def name = "${project.name}-${variantName}"

    /**基准包的文件路径, 对应 tinker 插件中的 oldApk 参数;编译补丁包时，必需指定基准版本的 apk，
     * 默认值为空，则表示不是进行补丁包的编译。*/
    baseApkFile = "${pathPrefix}/${name}.apk"

    /**基准包的 Proguard mapping.txt 文件路径, 对应 tinker 插件 applyMapping 参数；
     * 在编译新的 apk 时候，我们希望通过保持基准 apk 的 proguard 混淆方式，从而减少补丁包的大小。
     * 这是强烈推荐的，编译补丁包时，我们推荐输入基准 apk 生成的 mapping.txt 文件。*/
    baseProguardMappingFile = "${pathPrefix}/${name}-mapping.txt"

    /**基准包的资源 R.txt 文件路径, 对应 tinker 插件 applyResourceMapping 参数；
     * 在编译新的apk时候，我们希望通基准 apk 的 R.txt 文件来保持 Resource Id 的分配，
     * 这样不仅可以减少补丁包的大小，同时也避免由于 Resource Id 改变导致 remote view 异常。*/
    baseResourceRFile = "${pathPrefix}/${name}-R.txt"

    /** 若有编译多flavors需求,可在flavors中覆盖以下参数
     *  你也可以直接通过tinkerPatchAllFlavorDebug/tinkerPatchAllFlavorRelease, 一次编译所有的flavor补丁包
     *  注意的是:除非你不同的flavor代码是不一样的,不然建议采用zip comment或者文件方式生成渠道信息
     **/
//    productFlavors {
//        flavor {
//            flavorName = "flavor1"
//            appVersion = "${tinkerpatchSupport.appVersion}_${flavorName}"
//
//            pathPrefix = "${bakPath}/${baseInfo}/${flavorName}${variantName}/"
//            name = "${project.name}-${flavorName}${variantName}"
//
//            baseApkFile = "${pathPrefix}/${name}.apk"
//            baseProguardMappingFile = "${pathPrefix}/${name}-mapping.txt"
//            baseResourceRFile = "${pathPrefix}/${name}-R.txt"
//        }
//
//        flavor {
//            flavorName = "flavor2"
//            appVersion = "${tinkerpatchSupport.appVersion}_${flavorName}"
//
//            pathPrefix = "${bakPath}/${baseInfo}/${flavorName}${variantName}/"
//            name = "${project.name}-${flavorName}${variantName}"
//
//            baseApkFile = "${pathPrefix}/${name}.apk"
//            baseProguardMappingFile = "${pathPrefix}/${name}-mapping.txt"
//            baseResourceRFile = "${pathPrefix}/${name}-R.txt"
//        }
//    }
}

/**
 * 用于用户在代码中判断tinkerPatch是否被使能
 */
android {
    defaultConfig {
        buildConfigField "boolean", "TINKER_ENABLE", "${tinkerpatchSupport.tinkerEnable}"
    }
}

/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    ignoreWarning = false
    useSign = true
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex"]
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
    }
    buildConfig {
        keepDexApply = false
    }
}
